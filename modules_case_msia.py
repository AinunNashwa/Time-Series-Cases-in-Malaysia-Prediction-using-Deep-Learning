# -*- coding: utf-8 -*-
"""modules_case_msia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FAbGMs2NxLw3Xrvcs9lgTEZYA72BPJoa
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import Input
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Dropout
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_squared_error,mean_absolute_error

class EDA():
    def __init__(self):
        pass
    
    def plot_graph(self,df):
    
        plt.figure()
        plt.plot(df['cases_new'])
        plt.plot(df['cases_active'])
        plt.plot(df['cases_recovered'])
        plt.legend(['New Case','Active Case','Case Recovered'])
        plt.show()
        
class ModelCreation():
    def __init__(self):
        pass
    
    def sequential_layer(self,X_train,drop_rate=0.05,output_node=1):      
        model = Sequential()
        model.add(Input(shape=(np.shape(X_train)[1],1)))
        model.add(LSTM(64))
        model.add(Dropout(drop_rate))
        model.add(Dense(32,activation='relu'))
        model.add(Dropout(drop_rate))
        model.add(Dense(output_node,activation='linear'))
        model.summary()
        
        return model

class model_evaluation():
    def __init__(self):
        pass
        
    def plot_predicted_graph(self,test_df,predicted,mms):
        print('Mean Absolute Error:')
        print(mean_absolute_error(test_df,predicted))
        print('Mean Squared Error:')
        print(mean_squared_error(test_df,predicted))
        print('Mean Absolute Percentage Error:')
        print(mean_absolute_percentage_error(test_df,predicted))

        test_df_inversed = mms.inverse_transform(test_df)
        predicted_inversed = mms.inverse_transform(predicted)

        print('Mean Absolute Error_i:')
        print(mean_absolute_error(test_df_inversed,predicted_inversed))
        print('Mean Squared Error_i:')
        print(mean_squared_error(test_df_inversed,predicted_inversed))
        print('Mean Absolute Percentage Error_i:')
        print(mean_absolute_percentage_error(test_df_inversed,predicted_inversed))